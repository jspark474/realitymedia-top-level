//const {
//    constants
//} = require("fs");

const waitForEvent = function(eventName, eventObj) {
  return new Promise(resolve => {
    eventObj.addEventListener(eventName, resolve, { once: true });
  });
};

const waitForDOMContentLoaded = function() {
  if (document.readyState === "complete" || document.readyState === "loaded" || document.readyState === "interactive") {
    return Promise.resolve(null);
  } else {
    return waitForEvent("DOMContentLoaded", window);
  }
};

function sendRequest(url, verb, body) {
    const request = verb !== "GET" ? {
        method: verb,
        headers: {
            'Content-Type': 'application/json',
        },
        credentials: 'include', // use cookie
        body
    } : {
        method: verb,
        headers: {
            'Content-Type': 'application/json',
        },
        credentials: 'include', // use cookie
    };
    return fetch(url, request)
        .then(response => {
            console.log("login reply: ", response)
            if (!response.ok) {
                switch(response.status) {
                    case 400:  
                      response.json().then(data => {
                          console.error("Error calling SSO Server:", data);
                      });
                      break;

                    case 401:
                      console.error("Login error calling SSO Server");
                      break;

                    case 500:
                      response.json().then(data => {
                          console.error("Error calling SSO Server:", data);
                      });
                      break;                }        
            }
            return response;
        }).catch(e => {
            console.error("Call to SSO Server failed: ", e)
            return null
        })
}

function postiFrameMessage(msg) {
    if (window.SSO.iframeReady) {
        window.SSO.iframe.contentWindow.postMessage(msg, "*")
    } else {
        window.SSO.pendingMessages.push(msg)
    }
}

// need to update this to deal with logging in and out
// need to make the content available in window.SSO such that 
// the portal script can wait for them
function setupSSO(target) {
    console.log("Login state changed: ", target.state)
    if (!target.state) {
        console.error("State invalid")
        return;
    }
    const {
        credentials
    } = target.state;

    if (!credentials.email || !credentials.token) {
        try {
            const msg = {
                action: 'clear',
                key: window.SSO.constants.LOCAL_STORAGE_KEY
            }
            postiFrameMessage(msg)
        } catch (e) {
            console.error("Error updating browser storage for server: ", e);
        }

        let signoutURL = window.SSO.constants.PROTOCOL + "//" + window.SSO.constants.BASE_URL + "/sso/signout";
        sendRequest(signoutURL, "GET").then(response => {});  // don't really need to do anything except send the request

        return;
    }
    
    // check if user exists
    let checkURL = window.SSO.constants.PROTOCOL + "//" + window.SSO.constants.BASE_URL + "/sso/user/?email=" + encodeURIComponent(credentials.email) + "&token=" + encodeURIComponent(credentials.token);
    console.log("checkURL " + checkURL)

    // first save credentials in the iFrame, so its available on the main site's 
    // web page
    try {
        const msg = {
            action: 'save',
            key: window.SSO.constants.LOCAL_STORAGE_KEY,
            value: credentials
        }
        postiFrameMessage(msg)
    } catch (e) {
        console.error("Error updating browser storage for server: ", e);
    }

    sendRequest(checkURL, "GET").then(response => {
        if (!response.ok) {
            console.warn("Failure trying to get user data from SSO server")
            return;
        }

        var user = null
        if (response.status == 200) {
            response.json().then(user => {
                window.SSO.userInfo = user
            })
        } else {
            // create user on server
            let createURL = window.SSO.constants.PROTOCOL + "//" + window.SSO.constants.BASE_URL + "/sso/user/"
            console.log("create URL " + createURL)
            sendRequest(createURL, "POST", JSON.stringify({
                email: credentials.email,
                token: credentials.token
            })).then(result => {
                if (!result.ok) {
                    console.error("Could not store user data on SSO server")
                    return;
                }

                if (result.status == 200) {
                    result.json().then(err => {
                        console.warn("Creation of user on SSO server failed unexpectedly: " + err)
                        window.SSO.userInfo = null
                    })
                } else if (result.status == 201) {
                    result.json().then(user => {
                        window.SSO.userInfo = user
                    })
                }
            }).catch(e => {
                console.error("Error creating user: ", e)
                console.log(e);
            });
        }
    });
}

waitForDOMContentLoaded().then(() => {
    const isReady = () => {
        if (window.SSO.pendingMessages && window.SSO.pendingMessages.length && window.SSO.iframe) {
            window.SSO.pendingMessages.forEach(msg => {
                console.log("Sending message", msg)
                window.SSO.iframe.contentWindow.postMessage(msg, "*")
            })
        }
        window.SSO.iframeReady = true
    };
    if (!(window.SSO && Object.keys(window.SSO).length)) {
        window.SSO = {
            pendingMessages: [],
            eventListener: false,
            constants: {
                PROTOCOL: "{{{PROTOCOL}}}",
                LOCAL_STORAGE_KEY: "{{{LOCAL_STORAGE_KEY}}}",
                TOKEN: "{{{TOKEN}}}",
                BASE_URL: "{{{BASE_URL}}}"
            },
            userInfo: null
        };
        console.log("ready {{{TOKEN}}}")
        //console.log("ready for SSO")

        const iframeURL = window.SSO.constants.PROTOCOL + "//" + window.SSO.constants.BASE_URL + "/sso/";
        console.log("iframeURL " + iframeURL)
        window.SSO.iframe = document.querySelector(`iframe[src='${iframeURL}']`);

        if (!window.SSO.iframe) {
            window.SSO.iframeReady = false

            window.SSO.iframe = document.createElement("iframe");
            window.SSO.iframe.setAttribute("src", iframeURL);
            window.SSO.iframe.style.width = "1px";
            window.SSO.iframe.style.height = "1px";
            window.SSO.iframe.onload = isReady;
            
            document.body.appendChild(window.SSO.iframe);
        }

        if (!window.SSO.fathom) {
            window.SSO.fathom = document.createElement("script");
            window.SSO.fathom.setAttribute("src", "https://cdn.usefathom.com/script.js");
            window.SSO.fathom.setAttribute("site", "NIHGSWBU");
            document.body.appendChild(window.SSO.fathom);
        }
        
        setupSSO(window.APP.store);
        if (!window.SSO.eventListener) {
            window.APP.store.addEventListener("statechanged", ({
                target
            }) => {
                  setupSSO(target)
            });
            window.SSO.eventListener = true;
        }
    }
});